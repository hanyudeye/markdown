* Apache 
* nginx
#+begin_src nginx
  if (!-e $request_filename){  
	rewrite ^/index.php(.*)$ /index.php?s=$1 last; 
	rewrite ^/(.*)$ /index.php?s=$1 last;  
}
#+end_src

* Tomcat
** 主要配置文件
*** server.xml
    tomcat的主配置文件，包含service,connectors,engine,realm,valve,hosts等组件
*** web.xml
    遵循Servlet规范标准的配置文件，用于配置servlet，并为所有的Web应用程序提供包括
    MIME映射等默认配置信息；
*** tomcat-user.xml
    Realm认证时用到的相关角色、用户和密码等信息；Tomcat自带的manager默认情况下会用到此文件；在Tomcat中添加/删除用户，为用户指定角色等将通过编辑此文件实现
*** catalina.policy
 java相关的安全策略配置文件，在系统资源级别上提供访问控制的能力
*** catalina.properties
 Tomcat内部package的定义及访问相关的控制，也包括对通过类装载器装载的内容的控制；Tomcat在启动时会事先读取此文件的相关设置；
*** logging.properties
    Tomcat通过自己内部实现的JAVA日志记录器来记录操作相关的日志，此文件即为日志记录器相关的配置信息，可以用来定义日志记录的组件级别以及日志文件的存在位置等
*** context.xml
 所有host的默认配置信息
*** 下面详解介绍上述主要配置文件的参数及作用
 先看下一个server.xml例子
 
 #+begin_src xml
   <pre><Server port="8005" shutdown="SHUTDOWN">
     <Listener className="org.apache.catalina.core.AprLifecycleListener" SSLEngine="on" />
     <Listener className="org.apache.catalina.core.JasperListener" />
     <Listener className="org.apache.catalina.core.JreMemoryLeakPreventionListener" />
     <Listener className="org.apache.catalina.mbeans.GlobalResourcesLifecycleListener" />
     <Listener className="org.apache.catalina.core.ThreadLocalLeakPreventionListener" />

     <GlobalNamingResources>
       <Resource name="UserDatabase" auth="Container"
                 type="org.apache.catalina.UserDatabase"
                 description="User database that can be updated and saved"
                 factory="org.apache.catalina.users.MemoryUserDatabaseFactory"
                 pathname="conf/tomcat-users.xml" />
     </GlobalNamingResources>
     <Service name="Catalina">
       <Connector port="8080" protocol="HTTP/1.1"
                  connectionTimeout="20000"
                  redirectPort="8443" />
       <Connector port="8009" protocol="AJP/1.3" redirectPort="8443" />

       <Engine name="Catalina" defaultHost="localhost">

         <Realm className="org.apache.catalina.realm.LockOutRealm">
           <Realm className="org.apache.catalina.realm.UserDatabaseRealm"
                  resourceName="UserDatabase"/>
         </Realm>

         <Host name="localhost"  appBase="webapps"
               unpackWARs="true" autoDeploy="true">

           <Valve className="org.apache.catalina.valves.AccessLogValve" directory="logs"
                  prefix="localhost_access_log." suffix=".txt"
                  pattern="%h %l %u %t &quot;%r&quot; %s %b" />

         </Host>
       </Engine>

     </Service>
   </Server></pre>
 #+end_src
 下面解释下主要参数的意义

 <code><Server port=”8005” shutdown=”SHUTDOWN”></code>
 
 tomcat启动一个server实例（即一个JVM），它监听在8005端口以接收shutdown命令。各
 Server的定义不能使用同一个端口，这意味着如果在同一个物理机上启动了多个Server实
 例，必须配置它们使用不同的端口。

 部分参数意义：
 <pre>className: 用于实现此Server容器的完全限定类的名称，默认为org.apache.catalina.core.StandardServer；
 port: 接收shutdown指令的端口，默认仅允许通过本机访问，默认为8005；
 shutdown：发往此Server用于实现关闭tomcat实例的命令字符串，默认为SHUTDOWN；</pre>

 <code><Service name=”Catalina”></code>
 这定义了一个名为Catalina的Service，此名字也会在产生相关的日志信息时记录在日志文
 件当中。

 部分参数意义：
 <pre>className： 用于实现service的类名，一般都是org.apache.catalina.core.StandardService
 name：此服务的名称，默认为Catalina；</pre>

 <code><Connector port="8080" protocol="HTTP/1.1"
 maxThreads="150" connectionTimeout="20000"
 redirectPort="8443"/></code>
 以及
 <code><Connector port="8009" protocol="AJP/1.3" redirectPort="8443" /></code>

 进入Tomcat的请求可以根据Tomcat的工作模式分为如下两类：
 Tomcat作为应用程序服务器：请求来自于前端的web服务器，这可能是Apache, IIS, Nginx等；
 Tomcat作为独立服务器：请求来自于web浏览器；

 Tomcat应该考虑工作情形并为相应情形下的请求分别定义好需要的连接器才能正确接收来
 自于客户端的请求。一个引擎可以有一个或多个连接器，以适应多种请求方式。
 
 定义连接器可以使用多种属性，有些属性也只适用于某特定的连接器类型。一般说来，常
 见于server.xml中的连接器类型通常有4种：
 HTTP连接器
 SSL连接器
 AJP 1.3连接器
 proxy连接器


 定义连接器时可以配置的属性非常多，但通常定义HTTP连接器时必须定义的属性只有
 “port”，定义AJP连接器时必须定义的属性只有"protocol"，因为默认的协议为HTTP。以
 下为常用属性的说明：
 address：指定连接器监听的地址，默认为所有地址，即0.0.0.0；
 maxThreads：支持的最大并发连接数，默认为200；
 port：监听的端口，默认为0；
 protocol：连接器使用的协议，默认为HTTP/1.1，定义AJP协议时通常为AJP/1.3；
 redirectPort：如果某连接器支持的协议是HTTP，当接收客户端发来的HTTPS请求时，则转发至此属性定义的端口；
 connectionTimeout：等待客户端发送请求的超时时间，单位为毫秒，默认为60000，即1分钟；
 enableLookups：是否通过request.getRemoteHost()进行DNS查询以获取客户端的主机名；默认为true；

 acceptCount：设置等待队列的最大长度；通常在tomcat所有处理线程均处于繁忙状态时，新发来的请求将被放置于等待队列中；
 下面是一个定义了多个属性的SSL连接器：
 
 #+begin_src xml 
   <pre><Connector port="8443"
   maxThreads="150" minSpareThreads="25" maxSpareThreads="75"
   enableLookups="false" acceptCount="100" debug="0" scheme="https" secure="true"
   clientAuth="false" sslProtocol="TLS" /></pre>
 #+end_src

 <code><Engine name="Catalina" defaultHost="localhost"></code>
 Engine是Servlet处理器的一个实例，即servlet引擎，默认为定义在server.xml中的Catalina。Engine需要defaultHost属性来为其定义一个接收所有发往非明确定义虚拟主机的请求的host组件。
 部分参数意义：
 <pre>defaultHost：Tomcat支持基于FQDN的虚拟主机，这些虚拟主机可以通过在Engine容器中定义多个不同的Host组件来实现；但如果此引擎的连接器收到一个发往非非明确定义虚拟主机的请求时则需要将此请求发往一个默认的虚拟主机进行处理，因此，在Engine中定义的多个虚拟主机的主机名称中至少要有一个跟defaultHost定义的主机名称同名；
 name：Engine组件的名称，用于日志和错误信息记录时区别不同的引擎；</pre>

 位于Engine容器中用于接收请求并进行相应处理的主机或虚拟主机，如前面示例中的定义：
 
 #+begin_src xml
   <pre>  <Host name="localhost" appBase="webapps"
                unpackWARs="true" autoDeploy="true"
                xmlValidation="false" xmlNamespaceAware="false">
   </Host></pre>
 #+end_src

 常见属性说明
 <pre>常用属性说明：

 appBase：此Host的webapps目录，即存放非归档的web应用程序的目录或归档后的WAR文件
 的目录路径；可以使用基于$CATALINA_HOME的相对路径；
 
 autoDeploy：在Tomcat处于运行状态时放置于appBase目录中的应用程序文件是否自动进行
 deploy；默认为true；
 
 unpackWars：在启用此webapps时是否对WAR格式的归档文件先进行展开；默认为true；
 </pre>

 虚拟主机定义示例：
 
 #+begin_src xml 
   <pre>
     <Engine name="Catalina" defaultHost="localhost">
       <Host name="localhost" appBase="webapps">
         <Context path="" docBase="ROOT"/>
         <Context path="/bbs" docBase="/web/bss"
                  reloadable="true" crossContext="true"/>
       </Host>
       <Host name="mail.tiantian.com" appBase="/web/mail">
         <Context path="" docBase="ROOT"/>
       </Host>
     </Engine>
   </pre>
 #+end_src
 主机别名定义:
 如果一个主机有两个或两个以上的主机名，额外的名称均可以以别名的形式进行定义
 <pre><Host name="www.tiantian.com" appBase="webapps" unpackWARs="true">
 <Alias>tiantian.com</Alias>
 </Host>
 </pre>


 一个Context定义用于标识tomcat实例中的一个Web应用程序
 #+begin_src xml
   <pre>
     <Context path="" docBase="/web/webapps"/>

     <Context path="/bbs"
              docBase="/web/threads/bbs"
              reloadable="true">
     </Context>

     <Context path="/chat" docBase="/web/chat"/>

     <Context path="/darian" docBase="darian"/>
   </pre>
 #+end_src
 每一个context定义也可以使用一个单独的XML文件进行，其文件的目录为$CATALINA_HOME/conf/<engine name>/<host name>
 <p>
 部分参数解释：
 <pre>1) docBase：相应的Web应用程序的存放位置；也可以使用相对路径，起始路径为此Context所属Host中appBase定义的路径；切记，docBase的路径名不能与相应的Host中appBase中定义的路径名有包含关系，比如，如果appBase为deploy，而docBase绝不能为deploy-bbs类的名字；



 path：相对于Web服务器根路径而言的URI；如果为空“”，则表示为此webapp的根路径；如果context定义在一个单独的xml文件中，此属性不需要定义；
 reloadable：是否允许重新加载此context相关的Web应用程序的类；默认为false；
 </pre>
 <p>


 一个Realm表示一个安全上下文，它是一个授权访问某个给定Context的用户列表和某用户所允许切换的角色相关定义的列表。因此，Realm就像是一个用户和组相关的数据库。定义Realm时惟一必须要提供的属性是classname，它是Realm的多个不同实现，用于表示此Realm认证的用户及角色等认证信息的存放位置。

 JAASRealm：基于Java Authintication and Authorization Service实现用户认证；
 JDBCRealm：通过JDBC访问某关系型数据库表实现用户认证；
 JNDIRealm：基于JNDI使用目录服务实现认证信息的获取；
 MemoryRealm：查找tomcat-user.xml文件实现用户信息的获取；
 UserDatabaseRealm：基于UserDatabase文件(通常是tomcat-user.xml)实现用户认证，它实现是一个完全可更新和持久有效的MemoryRealm，因此能够跟标准的MemoryRealm兼容；它通过JNDI实现；
 下面是一个常见的使用UserDatabase的配置：
 <pre><Realm className=”org.apache.catalina.realm.UserDatabaseRealm”
 resourceName=”UserDatabase”/></pre>
 下面是一个使用JDBC方式获取用户认证信息的配置：
 <pre><Realm className="org.apache.catalina.realm.JDBCRealm" debug="99"
 driverName="org.gjt.mm.mysql.Driver"
 connectionURL="jdbc:mysql://localhost/authority"
 connectionName="test" connectionPassword="test"
 userTable="users" userNameCol="user_name"
 userCredCol="user_pass"
 userRoleTable="user_roles" roleNameCol="role_name" /></pre>

 Valve类似于过滤器，它可以工作于Engine和Host/Context之间、Host和Context之间以及Context和Web应用程序的某资源之间。一个容器内可以建立多个Valve，而且Valve定义的次序也决定了它们生效的次序。

 下面介绍常见的两种Valve。一个是RemoteHostValve，一个是RemoteAddrValve。
 <code>RemoteHostValve</code>:基于主机名称的访问控制,,控制本身可以通过allow或deny来进行定义
 <code>RemoteAddrValve</code>:基于IP地址的访问控,,控制本身可以通过allow或deny来进行定义
 <pre>  <Context path="/probe" docBase="probe">
 <Valve className="org.apache.catalina.valves.RemoteAddrValve"
 allow="127.0.0.1"/>
 </Context></pre>
 其中相关参数解释：
 <pre>其中相关属性定义有:

 className：相关的java实现的类名，相应于分别应该为org.apache.catalina.valves.RemoteHostValve或org.apache.catalina.valves.RemoteAddrValve；
 allow：以逗号分开的允许访问的IP地址列表，支持正则表达式，因此，点号“.”用于IP地址时需要转义；仅定义allow项时，非明确allow的地址均被deny；
 deny: 以逗号分开的禁止访问的IP地址列表，支持正则表达式；使用方式同allow；</pre>

 <h6>到这里，server.xml主要组件介绍的差不多了。其实远不止这么多属性，但是正常够我们用即可。如果还想再深入研究tomcat，当然去官方文档深入学习了。
 下面再附上一张更详配置文件结合相应web场景，相信大家对server.xml会有更好的理解。
 规划： 
 网站网页目录：/web/www      域名：www.test1.com 
 论坛网页目录：/web/bbs     URL：bbs.test1.com/bbs 
 网站管理程序：$CATALINA_HOME/wabapps   URL：manager.test.com    允许访问地址：172.23.136.* 
 
 conf/server.xml 
 <Server port="8005" shutdown="SHUTDOWN"> 
   <Listener className="org.apache.catalina.core.AprLifecycleListener" SSLEngine="on" /> 
   <Listener className="org.apache.catalina.core.JasperListener" /> 
   <Listener className="org.apache.catalina.core.JreMemoryLeakPreventionListener" /> 
   <Listener className="org.apache.catalina.mbeans.GlobalResourcesLifecycleListener" /> 
   <Listener className="org.apache.catalina.core.ThreadLocalLeakPreventionListener" /> 
   <GlobalNamingResources> 
   <!-- 全局命名资源，来定义一些外部访问资源，其作用是为所有引擎应用程序所引用的外部资源的定义 --!> 
     <Resource name="UserDatabase" auth="Container" 
               type="org.apache.catalina.UserDatabase" 
               description="User database that can be updated and saved" 
               factory="org.apache.catalina.users.MemoryUserDatabaseFactory" 
               pathname="conf/tomcat-users.xml" /> 
   </GlobalNamingResources> 
   <!-- 定义的一个名叫“UserDatabase”的认证资源，将conf/tomcat-users.xml加载至内存中，在需要认证的时候到内存中进行认证 --> 
   <Service name="Catalina"> 
   <!-- # 定义Service组件，同来关联Connector和Engine，一个Engine可以对应多个Connector，每个Service中只能一个Engine --!> 
     <Connector port="80" protocol="HTTP/1.1" connectionTimeout="20000" redirectPort="8443" /> 
     <!-- 修改HTTP/1.1的Connector监听端口为80.客户端通过浏览器访问的请求，只能通过HTTP传递给tomcat。  --> 
     <Connector port="8009" protocol="AJP/1.3" redirectPort="8443" /> 
     <Engine name="Catalina" defaultHost="test.com"> 
     <!-- 修改当前Engine，默认主机是，www.test.com  --> 
     <Realm className="org.apache.catalina.realm.LockOutRealm"> 
         <Realm className="org.apache.catalina.realm.UserDatabaseRealm" 
                resourceName="UserDatabase"/> 
     </Realm> 
     # Realm组件，定义对当前容器内的应用程序访问的认证，通过外部资源UserDatabase进行认证 
       <Host name="test.com"  appBase="/web" unpackWARs="true" autoDeploy="true"> 
       <!--  定义一个主机，域名为：test.com，应用程序的目录是/web，设置自动部署，自动解压    --> 
         <Alias>www.test.com</Alias> 
         <!--    定义一个别名www.test.com，类似apache的ServerAlias --> 
         <Context path="" docBase="www/" reloadable="true" /> 
         <!--    定义该应用程序，访问路径""，即访问www.test.com即可访问，网页目录为：相对于appBase下的www/，即/web/www，并且当该应用程序下web.xml或者类等有相关变化时，自动重载当前配置，即不用重启tomcat使部署的新应用程序生效  --> 
         <Context path="/bbs" docBase="/web/bbs" reloadable="true" /> 
         <!--  定义另外一个独立的应用程序，访问路径为：www.test.com/bbs，该应用程序网页目录为/web/bbs   --> 
         <Valve className="org.apache.catalina.valves.AccessLogValve" directory="/web/www/logs" 
                prefix="www_access." suffix=".log" 
                pattern="%h %l %u %t &quot;%r&quot; %s %b" /> 
         <!--   定义一个Valve组件，用来记录tomcat的访问日志，日志存放目录为：/web/www/logs如果定义为相对路径则是相当于$CATALINA_HOME，并非相对于appBase，这个要注意。定义日志文件前缀为www_access.并以.log结尾，pattern定义日志内容格式，具体字段表示可以查看tomcat官方文档   --> 
       </Host> 
       <Host name="manager.test.com" appBase="webapps" unpackWARs="true" autoDeploy="true"> 
       <!--   定义一个主机名为man.test.com，应用程序目录是$CATALINA_HOME/webapps,自动解压，自动部署   --> 
         <Valve className="org.apache.catalina.valves.RemoteAddrValve" allow="172.23.136.*" /> 
         <!--   定义远程地址访问策略，仅允许172.23.136.*网段访问该主机，其他的将被拒绝访问  --> 
         <Valve className="org.apache.catalina.valves.AccessLogValve" directory="/web/bbs/logs" 
                prefix="bbs_access." suffix=".log" 
                pattern="%h %l %u %t &quot;%r&quot; %s %b" /> 
         <!--   定义该主机的访问日志      --> 
       </Host> 
     </Engine> 
   </Service> 
 </Server> 
 
 conf/tomcat-users.xml 
 <?xml version='1.0' encoding='utf-8'?> 
 <tomcat-users> 
   <role rolename="manager-gui" /> 
   <!--  定义一种角色名为：manager-gui    --> 
   <user username="cz" password="manager$!!110" roles="manager-gui" /> 
   <!--  定义一个用户的用户名以及密码，并赋予manager-gui的角色    --> 
 </tomcat-users>
** 配置虚拟主机 
*** 方式一：这种配置方式需要重启服务器不推荐
    1.hosts 文件 127.0.0.1 www.yinzhengjie.org.cn

  2. 编辑Server.xml配置文件，添加虚拟主机信息
 #+begin_src xml
       <Host name="www.yinzhengjie.org.cn"  appBase="/home/yinzhengjie/data/www/webapps" unpackWARs="true" autoDeploy="true">
         <context path="" docBase="ROOT" reloadable="true" />
         <context path="/test" docBase="test" reloadable="true" />

         <Valve className="org.apache.catalina.valves.AccessLogValve" directory="logs"
                prefix="yinzhengjie.org.cn_access_log" suffix=".log"
                pattern="%h %l %u %t &quot;%r&quot; %s %b" />

       </Host>
 #+end_src

   3.重启tomcat服务
   catalina.sh stop
   catalina.sh start
   
4.访问 www.jsplearn.com:8080
*** 方式二、这种配置方式不需要重启服务器,推荐使用
在tomcat安装目录/conf/[EnginName]/[HostName]/在这个目录下写一个xml文件,其中xml文件的名字就是虚拟路径,在这个xml中可以配置<Context>标签,其中配置真实路径.

注意：

1）其中[EnginName]指的是在tomcat安装目录/conf/Server.xml这个配置文件中<Engin>标签元素对应的名字。

2）[HostName]指tomcat安装目录/conf/Server.xml这个配置文件中<Host>标签元素的名字。

3）如果所配置的虚拟路径中有/，由于文件名中不允许包含/需要用#替代.

 

使用方式二完成方法一中相同的配置时，应进行如下操作：

1）在tomcat安装目录/conf/CataLina/localhost/目录下创建一个名为HelloWord.xml的文件，（若文件名中有斜杠时使用#好代替：test#HelloWord.xml）

2）在HelloWord.xml文件中写入如下代码：

<?xml version="1.0" encoding="UTF-8"?>
<Context docBase="D:\apache-tomcat-7.0.63\wtpwebapps\HelloWord" path="/HelloWord" reloadable="true" />
其中<Context>标签属性说明参照上面内容。

缺省web应用设置：

只要将文件名设置为ROOT.xml则这个xml描述的web应用就成为了缺省web应用，

*** 方式三、最简单、最常用的方式
直接将web应用放置到，虚拟主机管理的目录下，此时虚拟主机就会自动加载该目录下的web
应用

 /conf/Server.xml的<Host>标签中的属性appBase所指向的目录即为当前虚拟主机虚拟主机
自动管理的目录，在属性autoDeploy为true的情况下，放置在这个目录下的web应用当前虚
拟主机可以自动加载。

缺省web应用设置：

只要将web应用文件夹名设置为ROOT则这个web应用就成为了缺省web应用，默认已经有一个
web应用，即默认访问的Tomcat的主页。

*** 默认应用目录 ROOT 
** jsp 配置,非必须 
   新建一个WEB-INF文件夹
   新建一个web.xml
   #+begin_src xml
     <?xml version="1.0" encoding="ISO-8859-1"?>

     <!DOCTYPE web-app
     PUBLIC
     "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"
     "http://java.sun.com/dtd/web-app_2_3.dtd">

     <web-app>

     <display-name>My Web Application</display-name>

     <description>
       A application for test
     </description>

     <servlet>
       <servlet-name>HelloWorld</servlet-name>
       <servlet-class>test.HelloWorld</servlet-class>
     </servlet>

     <servlet-mapping>
       <servlet-name>HelloWorld</servlet-name>
       <url-pattern>/HelloWorld</url-pattern>
     </servlet-mapping>
     </web-app>
#+end_src

