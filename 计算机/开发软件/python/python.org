#+TITLE: Python3 
#+DATE: 2021-08-29T05:56:47+08:00


* 语言
  
** 基础数据类型
   
   语言中的数据类型就像 生物世界中 动植物分类一样，构成了面向对象编程的基础。
   
*** Number
    
   - int
   - long
   - float
   - complex
#+begin_src python
   print(complex(12,3))
   print(12+3j)
#+end_src

*** String
    
    - len()
    - s[:-1]
    - s[0:3]
    - s.find(x)
    - s.replace(x,y)
    - s.split(',')
    - s.upper()
    - s.isalpha()
    - s.rstrip()

*** List
    
    - L.append(x)
    - L.pop(x) 移除某一项
    - L.sort()
    - L.reverse() 倒序
    
      
*** Tuple
    
    - T.index(x)
    - T.count(x) 统计
    - 
*** Dictionary
    - D.keys()
    - sorted(D) 返回排好序的键组
*** set
    集合 ('abc'),{'a','c'}
*** 生成器
    #+begin_src py
    nums=[1,2,4,9]
    print([ n+1 for n in nums])
    #+end_src
*** 类型转换

- int(x [,base])
- long(x [,base])
- float(x)
- str(x)
- tuple(s)
- list(s)
- set(s)
- dict(d) d 必须是一个序列 (key,value)元组。
- frozenset(s)  转换为不可变集合
- chr(x) 将一个整数转换为一个字符
- unichr(x) 将一个整数转换为 Unicode 字符
- ord(x) 将一个字符转换为它的整数值
- hex(x) 将一个整数转换为一个十六进制字符串
- oct(x) 将一个整数转换为一个八进制字符串
*** 运算符
**** 成员运算符 
     - in
     - not in
**** 身份运算符
     引用同一对象
     - is  x is y ,类似 id(x) == id(y)
     - is not  类似 id(x) != id(y)
** 类型与对象 
*** 类型 
    #+begin_src python
      class ClassName:
          '类的帮助信息'   #类文档字符串
          class_suite  #类体
    #+end_src

    #+begin_src python
      "创建 Employee 类的第一个对象"
      emp1 = Employee("Zara", 2000)
    #+end_src
**** 对象销毁
     Python 使用了引用计数这一简单技术来跟踪和回收垃圾。
     当对象被创建时， 就创建了一个引用计数
**** 继承
     #+begin_src python
              class 派生类名(基类名)
              class SubClassName (ParentClass1[, ParentClass2, ...]):
     #+end_src
**** 类属性与方法
***** 类的私有属性 
      __private_attrs：两个下划线开头，声明该属性为私有，不能在类的外部被使用或直接访问。在类内部的方法中使用时 self.__private_attrs。
***** 类的私有方法
      __private_method：两个下划线开头，声明该方法为私有方法，不能在类的外部调用。在类的内部调用 self.__private_methods
*** 引用与复制
*** 表示数据的内置类型
*** 表示程序结构的内置类型
*** 解释器内部使用的内置类型
*** 对象行为与特殊方法
** 函数，模块，包与分发
*** 函数
#+begin_src python
    def fun():
        # statement...
        [return ]
#+end_src
    
*** 模块
    一个 python 文件就是一个模块  
    一个包含模块的文件夹也是一个模块

    import ${module_name} # module_name 就是模块文件的名称,不加后缀 .py
    from ${module_namespace} import ${module_name} #从模块空间导入某个模块
** 测试、调试
** 查看物的信息
  > 查看物的信息 type
* 库
** 内置函数 
** 运行时服务
*** os and sys
    - 显示模块搜索路径  sys.path
    - 显示加载的模块 print(sys.modules)
    - 路径合理化 os.path.normpath
    - 绝对路径 abspath
    - 运行程序 os.system('python helloshell.py')
    - 把进程赋予变量 output = os.popen('python helloshell.py').read()
    - 环境变量 os.environ                                                                 
    - 运行程序 os.system, os.popen, os.execv, os.spawnv                                  
    - 进程处理  os.fork, os.pipe, os.waitpid, os.kill                                    
    - 文件描述  os.open, os.read, os.write                                              
    - 文件处理 os.remove, os.rename, os.mkfifo, os.mkdir, os.rmdir                    
    - 管理员工具 os.getcwd, os.chdir, os.chmod, os.getpid, os.listdir, os.access       
    - 移植工具 os.sep, os.pathsep, os.curdir, os.path.split, os.path.join  
    - 路径名称工具 os.path.exists('path'), os.path.isdir('path'), os.path.getsize('path')     

** 数学运算
*** math
    - pi
    - floor 地板
    - trunc 截断
*** random
    - random
** 字符串和文本处理 
*** odecs 
*** re
    - match 从起始位置开始匹配
    - search 查找第一个
    - fullmath 完全一样
    - split 用 pattern 截断
    - findall

    #+begin_src py
    match=re.match('/(.*)/(.*)/(.*)','/user/var/hello')
    print(match.groups())
    #+end_src

    #+begin_example
    返回 ('user', 'var', 'hello')
    #+end_example
*** string
** 数据库
** 文件和目录处理
*** bz2 
*** filecmp
*** fnmatch
*** glob
*** gzip
*** shutil
*** tarfile
*** tempfile
*** zipfile
*** zlib
** 操作系统服务
*** commands 
*** ConfigParser 、configparser
*** datetime
**** date
**** time
**** datetime
**** timedelta
*** errno
*** fcntl
*** io
*** logging
*** mmap
*** msvcrt
*** optparse
*** signal
*** subprocess
*** time
*** winreg
** 进程  
*** 创建进程
    Process([group [, target [, name [, args [, kwargs]]]]])
    target 表示调用对象
    args 表示调用对象的位置参数元组
    kwargs 表示调用对象的字典
    name 为别名
    group 实质上不使用

    下面看一个创建函数并将其作为多个进程的例子：
    #+begin_src python
      #!/usr/bin/env python3
      # -*- coding: UTF-8 -*-

      import multiprocessing
      import time


      def worker(interval, name):
          print(name + '【start】')
          time.sleep(interval)
          print(name + '【end】')


      if __name__ == "__main__":
          p1 = multiprocessing.Process(target=worker, args=(2, '两点水 1'))
          p2 = multiprocessing.Process(target=worker, args=(3, '两点水 2'))
          p3 = multiprocessing.Process(target=worker, args=(4, '两点水 3'))

          p1.start()
          p2.start()
          p3.start()

          print("The number of CPU is:" + str(multiprocessing.cpu_count()))
          for p in multiprocessing.active_children():
              print("child   p.name:" + p.name + "\tp.id" + str(p.pid))
              print("END!!!!!!!!!!!!!!!!!")

    #+end_src
*** 把进程创建成类
    当然我们也可以把进程创建成一个类，如下面的例子，当进程 p 调用 start() 时，自
    动调用 run() 方法。

    #+begin_src python

      # -*- coding: UTF-8 -*-

      import multiprocessing
      import time


      class ClockProcess(multiprocessing.Process):
          def __init__(self, interval):
              multiprocessing.Process.__init__(self)
              self.interval = interval

          def run(self):
              n = 5
              while n > 0:
                  print("当前时间: {0}".format(time.ctime()))
                  time.sleep(self.interval)
                  n -= 1


      if __name__ == '__main__':
          p = ClockProcess(3)
          p.start()

    #+end_src
*** daemon 属性

    想知道 daemon 属性有什么用，看下下面两个例子吧，一个加了 daemon 属性，一个没有加，对比输出的结果：

    没有加 deamon 属性的例子：

    #+begin_src python
      # -*- coding: UTF-8 -*-
      import multiprocessing
      import time


      def worker(interval):
          print('工作开始时间：{0}'.format(time.ctime()))
          time.sleep(interval)
          print('工作结果时间：{0}'.format(time.ctime()))


      if __name__ == '__main__':
          p = multiprocessing.Process(target=worker, args=(3,))
          p.start()
          print('【EMD】')

    #+end_src
    输出结果：

    ```txt
    【EMD】
    工作开始时间：Mon Oct  9 17:47:06 2017
    工作结果时间：Mon Oct  9 17:47:09 2017
    ```

    在上面示例中，进程 p 添加 daemon 属性：

    ```python
    # -*- coding: UTF-8 -*-

    import multiprocessing
    import time


    def worker(interval):
    print('工作开始时间：{0}'.format(time.ctime()))
    time.sleep(interval)
    print('工作结果时间：{0}'.format(time.ctime()))


    if __name__ == '__main__':
    p = multiprocessing.Process(target=worker, args=(3,))
    p.daemon = True
    p.start()
    print('【EMD】')
    ```

    输出结果：

    ```txt
    【EMD】
    ```


    根据输出结果可见，如果在子进程中添加了 daemon 属性，那么当主进程结束的时候，子
    进程也会跟着结束。所以没有打印子进程的信息。
*** join 方法
    结合上面的例子继续，如果我们想要让子线程执行完该怎么做呢？
    那么我们可以用到 join 方法，join 方法的主要作用是：阻塞当前进程，直到调用 join 方法的那个进程执行完，再继续执行当前进程。
    因此看下加了 join 方法的例子：

    #+begin_src python
      import multiprocessing
      import time


      def worker(interval):
          print('工作开始时间：{0}'.format(time.ctime()))
          time.sleep(interval)
          print('工作结果时间：{0}'.format(time.ctime()))


      if __name__ == '__main__':
          p = multiprocessing.Process(target=worker, args=(3,))
          p.daemon = True
          p.start()
          p.join()
          print('【EMD】')
    #+end_src
    输出的结果：

    ```txt
    工作开始时间：Tue Oct 10 11:30:08 2017
    工作结果时间：Tue Oct 10 11:30:11 2017
    【EMD】
    ```
*** Pool

    如果需要很多的子进程，难道我们需要一个一个的去创建吗？

    当然不用，我们可以使用进程池的方法批量创建子进程。

    例子如下：

    ```python
    # -*- coding: UTF-8 -*-

    from multiprocessing import Pool
    import os, time, random


    def long_time_task(name):
    print('进程的名称：{0} ；进程的 PID: {1} '.format(name, os.getpid()))
    start = time.time()
    time.sleep(random.random() * 3)
    end = time.time()
    print('进程 {0} 运行了 {1} 秒'.format(name, (end - start)))


    if __name__ == '__main__':
    print('主进程的 PID：{0}'.format(os.getpid()))
    p = Pool(4)
    for i in range(6):
    p.apply_async(long_time_task, args=(i,))
    p.close()
    # 等待所有子进程结束后在关闭主进程
    p.join()
    print('【End】')
    ```

    输出的结果如下：

    ```txt
    主进程的 PID：7256
    进程的名称：0；进程的 PID: 1492
    进程的名称：1；进程的 PID: 12232
    进程的名称：2；进程的 PID: 4332
    进程的名称：3；进程的 PID: 11604
    进程 2 运行了 0.6500370502471924 秒
    进程的名称：4；进程的 PID: 4332
    进程 1 运行了 1.0830621719360352 秒
    进程的名称：5；进程的 PID: 12232
    进程 5 运行了 0.029001712799072266 秒
    进程 4 运行了 0.9720554351806641 秒
    进程 0 运行了 2.3181326389312744 秒
    进程 3 运行了 2.5331451892852783 秒
    【End】
    ```

    这里有一点需要注意： `Pool` 对象调用 `join()` 方法会等待所有子进程执行完毕，调
    用 `join()` 之前必须先调用 `close()` ，调用`close()` 之后就不能继续添加新的
    Process 了。

    请注意输出的结果，子进程 0，1，2，3 是立刻执行的，而子进程 4 要等待前面某个子
    进程完成后才执行，这是因为 Pool 的默认大小在我的电脑上是 4，因此，最多同时执行
    4 个进程。这是 Pool 有意设计的限制，并不是操作系统的限制。如果改成：

    ```python
    p = Pool(5)
    ```

    就可以同时跑 5 个进程。
*** 进程间通信

    Process 之间肯定是需要通信的，操作系统提供了很多机制来实现进程间的通信。Python
    的 multiprocessing 模块包装了底层的机制，提供了 Queue、Pipes 等多种方式来交换
    数据。

    以 Queue 为例，在父进程中创建两个子进程，一个往 Queue 里写数据，一个从 Queue 里读数据：

    ```python
    #!/usr/bin/env python3
    # -*- coding: UTF-8 -*-

    from multiprocessing import Process, Queue
    import os, time, random


    def write(q):
    # 写数据进程
    print('写进程的 PID:{0}'.format(os.getpid()))
    for value in ['两点水', '三点水', '四点水']:
    print('写进 Queue 的值为：{0}'.format(value))
    q.put(value)
    time.sleep(random.random())

    def read(q):
    # 读取数据进程
    print('读进程的 PID:{0}'.format(os.getpid()))
    while True:
    value = q.get(True)
    print('从 Queue 读取的值为：{0}'.format(value))

    if __name__ == '__main__':
    # 父进程创建 Queue，并传给各个子进程
    q = Queue()
    pw = Process(target=write, args=(q,))
    pr = Process(target=read, args=(q,))
    # 启动子进程 pw
    pw.start()
    # 启动子进程 pr
    pr.start()
    # 等待 pw 结束:
    pw.join()
    # pr 进程里是死循环，无法等待其结束，只能强行终止
    pr.terminate()

    ```
    输出的结果为：

    ```txt
    读进程的 PID:13208
    写进程的 PID:10864
    写进 Queue 的值为：两点水
    从 Queue 读取的值为：两点水
    写进 Queue 的值为：三点水
    从 Queue 读取的值为：三点水
    写进 Queue 的值为：四点水
    从 Queue 读取的值为：四点水
    ```
** 线程与并发性
*** multiprocessing
**** 进程 
**** 进程间通信
**** 进程池
**** 共享数据与同步
**** 托管对象
**** 连接
*** threading
**** Thread
**** Timer
**** Lock
**** RLock
**** 信号量与有边界的信号量
**** 事件
**** 条件变量
**** 使用 Lock
**** 线程终止与挂起
*** queue、Queue
*** 协程与微线程
** 网络编程与套接字
*** 网路编程基础 
*** asynchat
*** asynncore
*** select
*** socket
**** 地址族
**** 套接字类型
**** 寻址
**** 函数
**** 异常
**** 示例
*** ssl
*** SocketServer
** Internet 编程
*** ftplib
*** http
**** http.client 
**** http.server
**** http.cookie
**** http.cookiejar
*** smtplib
*** urllib
*** xmlrpc
** Web 编程
*** cgi
*** cgitb
*** wsgiref
*** webbrowser
** Internet 数据处理与编码
*** base64
*** binascii
*** csv
*** email
*** hashlib
*** hmac
*** HtMLParser
*** json
*** mimetypes
*** quopri
*** xml
** 其它库
*** Python 服务
*** 国际化
*** 多媒体
** 扩展与嵌入
*** 扩展模块
*** 嵌入 Python 解释器
* python 项目的通用创建方法     
  1 .Create and configure virtualenv for your project, before using pip. This is
  the most Pythonic way (创建一个虚拟环境)
  
  Try to install Django using built-in pip module:

2.python -m pip install django  (可以显示 django 的安装路径)

This command should install packages into site-packages directory.

3.You may also add dist-packages to your PYTHONPATH. (把 site-packages 添加到路径变量里面)

This question should help you: How to globally modify the default PYTHONPATH (sys.path)? (这个是其他方法)

* 工具
** 虚拟环境 virtualenv 管理包
   环境，就是用某个环境的工具执行代码喽，激活了环境记得关闭此环境哦
    
*** 创建虚拟环境
    创建 env 环境目录   virtualenv env
    创建目录，并选用 python3 的解释器 virtualenv -p /usr/local/bin/python3 venv
*** 启动虚拟环境 source ./bin/activate
    Virtualenv 附带有 pip 安装工具，因此需要安装的 packages 可以直接运行：
*** 退出虚拟环境 deactivate
*** 删除虚拟环境 rm -rf 
*** 虚拟环境管理工具 Virtualenvwrapper 
**** 创建虚拟机 mkvirtualenv env
**** 列出虚拟环境列表 workon 或者 lsvirtualenv
**** 启动/切换虚拟环境 workon [virtual-name]
**** 删除虚拟环境 rmvirtualenv  [virtual-name]
**** 离开虚拟环境 deactivate
** 版本管理 pyenv,管理 python 版本

   常用命令 
   pyenv versions – 查看系统当前安装的 python 列表
   pyenv version – 查看系统当前使用的 python 版本
   pyenv install -v 3.5.3 – 安装 python
   pyenv uninstall 2.7.13 – 卸载 python
   pyenv rehash – 为所有已安装的可执行文件（如：~/.pyenv/versions/bin/）创建 shims， 因此每当你增删了 Python 版本或带有可执行文件的包（如 pip）以后，都应该执行一次本命令）
   
   版本切换
   pyenv global 3.5.3 – 设置全局的 Python 版本，通过将版本号写入~/.pyenv/version 文件的方式
   pyenv local 2.7.13 – 设置面向程序的本地版本，通过将版本号写入当前目录下的.python-version 文件的方式。 通过这种方式设置的 Python 版本优先级较 global 高。
   pyenv shell 2.7.13 - 设置面向 shell 的 Python 版本，通过设置当前 shell 的 PYENV_VERSION 环境变量的方式
   优先级: shell > local > global

   卸载 pyenv
   禁用 pyenv 很简单，只需要在~/.bash_profile 中的 pyenv init 那行删了即可。
   完全移除 pyenv，先执行上面第 1 步，然后删了 pyenv 的根目录: rm -rf $(pyenv root)
   插件 pyenv-virtualenv
   
   安装插件    官网地址: https://github.com/pyenv/pyenv-virtualenv

   使用自动安装 pyenv 后，它会自动安装部分插件，通过 pyenv-virtualenv 插件可以很好的和 virtualenv 结合
   另外，一个可选配置是在~/.bash_profile 最后添加:

   eval "$(pyenv virtualenv-init -)"
   
   可以实现自动激活虚拟环境，这个特性非常有用建议都加上。

   创建虚拟环境: pyenv virtualenv 2.7.13 virtual-env-2.7.13，默认使用当前环境 python 版本。 在文件夹$(pyenv root)/versions/my-virtual-env-2.7.13 中创建一个基于 Python 2.7.13 的虚拟环境。
   列出虚拟环境: pyenv virtualenvs，对每个 virtualenv 显示 2 个, 短的只是个链接，那个*表示当前激活的。
   激活虚拟环境: pyenv activate virtual-env-2.7.13
   退出虚拟环境: pyenv deactivate
   删除虚拟环境: pyenv uninstall virtual-env-2.7.13
   
   如果 eval "$(pyenv virtualenv-init -)"写在你的 shell 配置中(比如上面
   的~/.bash_profile), 那么当 pyenv-virtualenv 进入/离开某个含有.python-version
   目录时会自动激活/退出虚拟环境。
   
   场景使用流程:

   # 先创建一个虚拟环境
   pyenv versions
   pyenv virtualenv 2.7.13 virtual-env-2.7.13
   # 进入某个目录比如/root/work/flask-demo
   pyenv local virtual-env-2.7.13
   # 然后再不需要去手动激活了
   使用 pyenv 来管理多版本的 python 命令，使用 pyenv-virtualenv 插件来管理多版本
   python 包环境。爽歪歪~

* pip
** 包的安装路径
  pip show PACKAGENAME
 一般情况下，包总是被安装在 python 安装目录下的 lib\site-packages\包名\

 
