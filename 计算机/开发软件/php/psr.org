* PSR 规范
PHP Standard Recommendation  

** 自动加载规范
\vendor\Namespace\class

 `\Doctrine\Common\IsolatedClassLoader` => `/path/to/project/lib/vendor/Doctrine/Common/IsolatedClassLoader.php`

1. 一个完整的类名需具有以下结构:
```
\<命名空间>(\<子命名空间>)*\<类名>
 ```

** 基本代码规范
- PHP 代码文件**必须**以 `<?php` 或 `<?=` 标签开始；

- PHP 代码文件**必须**以 `不带 BOM 的 UTF-8` 编码；

- PHP 代码中**应该**只定义类、函数、常量等声明，或其他会产生 `从属效应` 的操作（如：生成文件输出以及修改.ini 配置文件等），二者只能选其一；

- 命名空间以及类**必须**符合 PSR 的自动加载规范：[PSR-4][]；

- 类的命名**必须**遵循 `StudlyCaps` 大写开头的驼峰命名规范；

- 类中的常量所有字母都**必须**大写，单词间用下划线分隔；

- 方法名称**必须**符合 `camelCase` 式的小写开头驼峰命名规范。

**  代码风格规范

** 日志接口规范
- LoggerInterface 接口定义了八个等级 ,debug, info ,notice, warning, error, critical,alert,emergency
** 缓存接口规范
- 实现类库
- 生存时间值 (TTL - Time To Live)
- 过期时间 （Expiration)
- 命中 （Hit）
- 未命中 （miss）
- 延迟 （Deferred)
- 缓存池
** HTTP 消息接口
每一个 HTTP 请求消息有一个具体形式：
```php
POST /path HTTP/1.1
Host: example.com

foo=bar&baz=bat
```

HTTP 响应信息具有类似的结构：
```php
HTTP/1.1 200 OK
Content-Type: text/plain

This is the response body
```

*** HTTP 头
不区分大小写的头字段名
```php
$message = $message->withHeader('foo', 'bar');

echo $message->getHeaderLine('foo');
// Outputs: bar

echo $message->getHeaderLine('FOO');
// Outputs: bar

$message = $message->withHeader('fOO', 'baz');
echo $message->getHeaderLine('foo');
// Outputs: baz
```

