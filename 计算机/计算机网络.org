* 计算机网络
计算机网络: 数据进行传输

网络协议: 数据能够顺畅传输的标准。 

协议族: 一系列协议 (传送芝麻一套标准，传输西瓜另一套标准）

** OSI 协议族
   - 应用层 (针对每个应用的协议)
   - 表示层 ( 接收不同表示形式的信息，如文字流，图像，声音等)
   - 会话层 (何时建立连接，何时断开连接及连接保持)
   - 传输层 (是否数据丢失)
   - 网络层 (路由目标地址)
   - 数据链路层 (数据帧与比特流之间切换)
   - 物理层 (比特流与电子信号之间的切换）
** TCP/IP 协议族
*** 分层 
 - 应用层协议 (文件层)
 - 传输层
 - 网络层
 - 数据链路层
 - 物理层

  
 在 TCP / IP 协议族中，网络层 IP 提供的是一种不可靠的服务。也就是说，它只是尽可能快地把分组从源结点送到目的结点，但是并不提供任何可靠性保证。
 而另一方面， TCP 在不可靠的 IP 层上提供了一个可靠的运输层。为了提供这种可靠的服务， TCP 采用了超时重传、发送和接收端到端的确认分组等机制。
*** 互联网地址 
    - A 类地址范围：0.0.0.0~127.255.255.255，
    - B 类地址范围：128.0.0.0~191.255.255.255，
    - C 类地址范围：192.0.0.0~223.255.255.255，
    - D 类地址范围：224.0.0.0~239.255.255.255，
    - E 类地址范围：240.0.0.0~247.255.255.255.
      
   私有地址 
   10.0.0.0 ~ 10.255.255.255 (10/8) A 类
   172.16.0.0 ~ 172.31.255.255( 172.16/12) B 类
   192.168.0.0 ~ 192.168.255.255 (192.168/16) C 类

   IPv6 (128 位)

   FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF
*** 域名系统
    
   提供 IP 与 主机名的映射 
*** 端口号 

    TCP 和 UDP 使用 16 位端口号来识别应用程序
    
** IP 辅助技术
   仅凭 IP 无法单独工作
*** DNS
*** ARP
*** ICMP
*** DHCP
** HTTP
   Hyper Text Transfer Protocol 是用于从万维网服务器传输超文本到本地浏览器的传送
   协议，适用于分布式超媒体信息系统

   HTTP 协议工作于客户端-服务端架构之上。浏览器作为 HTTP 客户端通过 URL 向 HTTP
   服务端即 WEB 服务器发送所有请求。Web 服务器根据接收到的请求后，向客户端发送响
   应信息。
*** 特点

    - 简单快速：客户向服务器请求服务时，只需传送请求方法和路径。请求方法：GET、HEAD、POST。
    - 灵活：HTTP 允许传输任意类型的数据对象。 类型由 Content-Type 标记
    - 无连接: 无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接
    - 无状态：HTTP 协议是无状态协议。无状态是指协议对于事务处理没有记忆能力
    - 支持 B/S 及 C/S 模式
*** HTTP 之 URL
    URL  用来定位资源，并可提供参数
    
    URL 是一种特殊类型的 URI，包含了用于查找某个资源的足够的信息
    
*** HTTP 之请求消息 Request
    
    #+begin_example
    GET /562f25980001b1b106000338.jpg HTTP/1.1
    Host    img.mukewang.com
    User-Agent    Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.106 Safari/537.36
    Accept    image/webp,image/*,*/*;q=0.8
    Referer    http://www.imooc.com/
    Accept-Encoding    gzip, deflate, sdch
    Accept-Language    zh-CN,zh;q=0.8

    name=Professional%20Ajax&publisher=Wiley  [主体]
    #+end_example

*** HTTP 之响应消息 Response

    #+begin_example
    HTTP/1.1 200 OK
    Date: Fri, 22 May 2009 06:07:21 GMT
    Content-Type: text/html; charset=UTF-8

    <html>
    <head></head>
      <body>
            <!--body goes here-->
      </body>
      </html>
    #+end_example

*** HTTP 之状态码

    #+begin_example
    200 OK                        //客户端请求成功
    400 Bad Request               //客户端请求有语法错误，不能被服务器所理解
    401 Unauthorized              //请求未经授权，这个状态代码必须和 WWW-Authenticate 报头域一起使用 
    403 Forbidden                 //服务器收到请求，但是拒绝提供服务
    404 Not Found                 //请求资源不存在，eg：输入了错误的 URL
    500 Internal Server Error     //服务器发生不可预期的错误
    503 Server Unavailable        //服务器当前不能处理客户端的请求，一段时间后可能恢复正常
    #+end_example

*** 流程

    1、浏览器向 DNS 服务器请求解析该 URL 中的域名所对应的 IP 地址;

    2、解析出 IP 地址后，根据该 IP 地址和默认端口 80，和服务器建立 TCP 连接;

    3、浏览器发出读取文件(URL 中域名后面部分对应的文件)的 HTTP 请求，该请求报文作为 TCP 三次握手的第三个报文的数据发送给服务器;

    4、服务器对浏览器请求作出响应，并把对应的 html 文本发送给浏览器;

    5、释放 TCP 连接;

    6、浏览器将该 html 文本并显示内容; 　　

