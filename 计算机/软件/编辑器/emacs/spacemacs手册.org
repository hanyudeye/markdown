#+title: spacemacs 使用手册


* spacemacs 使用手册
** 核心支柱
  Spacemacs 的四大核心支柱是：
  方便记忆，方便查找，操作行为一致，hacker社区支持。
  如果任何一点违背来这四大核心，请给我发来信息。

Communtiy-driven configuration provides curated package tuned by power user and bugs are fixed quickly.
  
** Highlighted features  
   - Bring the efficiency of modal editing to the powerful Emacs lisp platform.
     Modal UX is optional and spacemacs can be used with only Emacs key bindings.
   - Integrate nicely with ~Evil~ states (~Vim~ modes). 集成 Vim 模式
   - Keep your fingers on the home row for quicker editing with support for QWERTY and BEPO layouts. 使您的手指保持在键盘的主输入区域
   - Minimalistic and nice graphical UI keeps your available screen space for what matters: your text files.
   - 简约和漂亮的用户界面使您的屏幕用于最重要的文本展示
   - Fast boot time:
   - Lower the risk of RSI by heavily using the space bar instead of modifiers
   - Contribute easily with your imporvements and new configuration layers.
   - Very active and helpful community on ~Gitter~ and ~IRC~
   
** Update and Rollback
  
*** Update Spacemacs repository 
 #+begin_src sh
   $ git pull 
 #+end_src
   
*** Update packages

    configuration-layers/update-packages

*** Rollback package

    configuration-layers/rollback

** Configuration layers 
   This section is an overview of layers. A more extensive instroduction to writing configuration layers can be found here 

*** Purpose (意图)
    Layers help collect related packages together to provide features. This approach helps keep configuration organized and reduces overhead for the user by keeping them from having to think about what packages to install.

    
*** Structure
    Each layer has the following structure:

#+begin_example
[layer_name]
  local 
     [package 1]
     ...
     [package n]
  layers.el      The place to declare additional layers
  packages.el  This list of packages and  their configuration functioins
  funcs.el   All functions defined in the layer
  config.el Layer configuration 
  keybindings.el  General key bindings not tied to a specific package configuration
#+end_example

Package can be:
- ELPA packages installed from an ELPA compliant repository
- local packages in a layer's local folder
- installed from an online source using quelpa

  
*** Configure packages

    #+begin_src emacs-lisp
    (setq <layer>-packages '(package1 package2 ...)
    #+end_src

    if package A depends on B then you can configure A with:
    #+begin_src emacs-lisp
      (with-eval-after-load 'B ...)
    #+end_src
    

    To initialize a package xxx, define a function with this format in package.el:
    #+begin_src emacs-lisp
      (defun <layer>/init-xxx () ... body)
    #+end_src

    To exclude packages
    #+begin_src emacs-lisp
      (setq <layer>-excluded-packages '(package1 package2 ...)
    #+end_src

   
**** Without a layer 
    仅仅想添加包，而不想创建层 ，可以在 dotfile 中配置
    #+begin_src emacs-lisp
      (defun dotspacemacs/layers()
        " Configuration Layers declaration..."
        (setq-default
         ;;...
         dotspacemacs-additional-packages '(llvm-modes dts-mode)
         ;;...
         ))
    #+end_src

    If you want to add some configuration fom them,do so in the ~dotspacemacs/user-config~ function, or consider creating a layer.

    
    
    
*** Packages synchronization
Spacemacs will only install the packages that are explicitly used by the user.
Any package that is not used will be considered an orphan and will be deleted at the next startup of Emacs.

*** Types of configuration layers
    有两种配置层的方法:
    - distributed layers (这些层是由社区分享的）
    - private (在 private 目录, 会被 Git 忽略)
    
** Dotfile Configuration

   User configuration can be stored in your ~/.spacemacs file

*** Dotfile Installation
    The very first time Spacemacs starts up, it will ask you several questions and then install the .spacemacs file in your HOME directory
   
*** dotdirectory

    A dotdirectory ~/.spacemacs.d/ can be used instead of a dotfile
    If you want to use this option, move ~/.spacemacs to ~/.spacemacs.d/init.el

    
*** Synchronization of dotfile changes ( 同步应用dotfile 的修改 )

   To apply the modifications made in ~/.spacemacs  press ~SPC f e R~. It will re-excute the Spacemacs initialization process.  

   为了规避初始化带来对开关函数的影响，推荐使用 setq 表达式或者 on  or off versions instead. (.i.e instead of spacemacs/toggle-<thing>, use spacemacs/toggle-<thing>-on or spacemacs/toggle-<thing>-off).

   It is possible to skip the execution of dotspacemacs/user-config with the universal argument (SPC u SPC f e R).
   

   
*** Testing the dotfile

    You can use the spacemacs/test-dotfile to check if your dotfile looks correct.

** Concepts (概念)
   
*** Editing Styles
    Spacemacs comes with several editing styles which can be switched dynamically providing an easier way to do pair programming, for instance between a Vim user and an Emacs user.

    Three styles are available:
    - Vim
    - Emacs
    - Hybrid (a mix between Vim and Emacs)
  
      要设置 editing style (编辑方式)， set the variable dotspacemacs-editing-style to either vim , hybrid, or emacs.
    
**** Vim

     To bind keys in Vim editing style (insert state 插入状态):
     #+begin_src emacs-lisp
       (define-key evil-insert-state-map (kbd "C-]") 'forward-char)
     #+end_src
     
**** Emacs

     To bind keys in Emacs editing style (=emacs state=):

#+BEGIN_SRC emacs-lisp
  (define-key evil-emacs-state-map (kbd "C-]") 'forward-char)
#+END_SRC

*** Universal argument

    The universal argument C-u is an important command in Emacs but it is also a very handy Vim key binding to scroll up.

    Spacemacs changes the Universal argument binding to ~SPC u~.

** GUI Elements    
   
*** Color themes
官方的主题是 spacemacs-dark(默认主题)，另一个是 spacemacs-light ，可以在 dotfile 中设置要使用的主题:

(setq-default dotspacemacs-themes '(spacemacs-light leuven zenburn))

- 切换主题 cycle-spacemacs-theme
- 加载某个主题 load-theme

  ** 注意：** 
   - 在中断中使用emacs ，主题颜色无法正确显示，需要自己修改终端调色板 
    
*** Font 字体
spacemacs 使用的默认字体是 [Source Code Pro](https://github.com/adobe-fonts/source-code-pro) 。如果你想使用它，建议将它安装在你的系统上。

#+begin_src emacs-lisp
  (setq-default dotspacemacs-default-font '("Source Code Pro"
                                          :size 13
                                          :weight normal
                                          :width normal
 
#+end_src
    
- :width 相对字符宽度。这应该是其中的一个符号：
    - ultra-condensed
    - extra-condensed
    - condensed
    - semi-condensed
    - normal
    - semi-expanded
    - expanded
    - extra-expanded
  

*** Transient-states 状态栏

*** Toggles 开关

    Spacemacs 使用开关指令来打开和关闭一些界面元素

| Key Binding | Description                      |
|-------------+----------------------------------|
| SPC t 8     | 高亮显示第80列以后的任何字符     |
| SPC t f     | 显示填充列（默认填充列设置为80） |
| SPC t h h   | 切换当前行的高亮显示             |
| SPC t h i   | 切换突出显示缩进级别             |
| SPC t h c   | 切换高亮显示缩进当前列           |
| SPC t i     | 在点处切换缩进指南               |
| SPC t l     | 切换截断线                       |
| SPC t L     | 切换视线                         |
| SPC t n     | 切换行号                         |
| SPC t v     | 切换平滑滚动                     |


| Key Binding | Description                      |
|-------------+----------------------------------|
| SPC T ~     | 在空行的边缘显示 ~               |
| SPC T F     | 全屏切换帧                       |
| SPC T f     | 切换显示边缘                     |
| SPC T m     | 切换菜单栏                       |
| SPC T M     | 切换帧最大化                     |
| SPC T t     | 切换工具栏                       |
| SPC T T     | 切换帧透明度并进入透明度瞬态状态 |

** Layouts 和 workspace
   布局是具有缓冲区隔离的窗口配置，每个布局可以定义几个工作空间（子布局），与父布局共享相同的缓冲区列表

*** 自定义布局模板   
是应用 define-custom-layout 定义布局
#+begin_src emacs-lisp
(spacemacs|define-custom-layout "@ERC"
  :binding "E"
  :body
  (progn
    ;; hook to add all ERC buffers to the layout
    (defun spacemacs-layouts/add-erc-buffer-to-persp ()
      (persp-add-buffer (current-buffer)
                        (persp-get-by-name
                         erc-spacemacs-layout-name)))
    (add-hook 'erc-mode-hook #'spacemacs-layouts/add-erc-buffer-to-persp)
    ;; Start ERC
    (call-interactively 'erc)))
#+end_src

然后用 SPC l o E 来启动它自己的布局中的 ERC。任何新的 ERC 缓冲区将成为自定义布局的一部分。
    
*** 创建工程布局
    
