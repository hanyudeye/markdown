* 自定义hugo主题--内容列表页 
  
  文章中的源码: [[https://github.com/Suroppo/hugo-theme-demo]]

** 内容页面的划分
根据内容页存放的位置, 内容页分为两种, 一种是存放在content根目录下面的内容页, 叫单页面(Single Page), 一种是存放在content子目录下的内容页, 叫章节页面(Section Page). 两者的区别是: 他们的Section属性不同, 章节页面的Section属性的值为页面所在的目录名, 单页面的Section属性的值为空字符串, Type属性为 =page=.

这里给内容页面添加列表页主要是给章节页面添加列表页.

** 为所有的内容页面添加一个列表页.


在前一篇DEMO的基础上我们多添加了几篇博文, 和一个_index.md文件. content目录的结构如下

| #+BEGIN_EXAMPLE   | #+BEGIN_EXAMPLE            |
|       1           |      └── content           |
|      2            |         └── post           |
|      3            |             ├─ _index.md   |
|      4            |             ├─ page1.md    |
|      5            |             ├─ page2.md    |
|      6            |             ├─ page3.md    |
|      7            |             └─ page4.md    |
| #+END_EXAMPLE     | #+END_EXAMPLE              |

_index.md就是post目录下面所有博文的列表页. 它对应的默认模板文件在: layouts/_default/list.html.

现在修改list.html内容如下

| #+BEGIN_EXAMPLE   | #+BEGIN_EXAMPLE                                                                           |
|        1          |                                                                                           |
|       2           |      < html  lang = "zh" >                                                                |
|       3           |      < head >                                                                             |
|       4           |          < meta  charset = "UTF-8" >                                                      |
|       5           |          < meta  name = "viewport"  content = "width=device-width, initial-scale=1.0" >   |
|       6           |          < meta  http-equiv = "X-UA-Compatible"  content = "ie=edge" >                    |
|       7           |          < title >列表页面  title >                                                       |
|       8           |       head >                                                                              |
|       9           |      < body >                                                                             |
|      10           |                                                                                           |
|      11           |         {{  range .Pages }}                                                               |
|      12           |              < div >                                                                      |
|      13           |                  < a  href = ".Permalink" >{{.Title}}  a >                                |
|      14           |               div >                                                                       |
|      15           |         {{  end  }}                                                                       |
|      16           |       body >                                                                              |
|      17           |       html >                                                                              |
| #+END_EXAMPLE     | #+END_EXAMPLE                                                                             |

=range=: 可以用来遍历集合, .Pages变量获取的是当前当前章节下说有的内容页的集合. 如本例中, 访问post章节下的列表页, 这时.Pages包含的就是post目录下的所有文章.

在遍历的时候, 每次循环的上下文就是每个内容页面, 内容页面模板中的变量都可以使用的.

** 为内容页面添加上一页和下一页


这里主要使用到了内容页模板中的 =.NextInSection= 和 =.PrevInSection= 变量, 他们表示当前章节中, 按时间倒序排列的文章集合的后一篇文章和前一篇文章.

| #+BEGIN_EXAMPLE   | #+BEGIN_EXAMPLE                                                                           |
|        1          |                                                                                           |
|       2           |      < html  lang = "zh" >                                                                |
|       3           |                                                                                           |
|       4           |      < head >                                                                             |
|       5           |          < meta  charset = "UTF-8" >                                                      |
|       6           |          < meta  name = "viewport"  content = "width=device-width, initial-scale=1.0" >   |
|       7           |          < meta  http-equiv = "X-UA-Compatible"  content = "ie=edge" >                    |
|       8           |          < title >{{.Title}}  title >                                                     |
|       9           |       head >                                                                              |
|      10           |                                                                                           |
|      11           |      < body >                                                                             |
|      12           |          < div  id = "post"  class = "post" >                                             |
|      13           |              < article >                                                                  |
|      14           |                  < header >                                                               |
|      15           |                      < h1  class = "post-title" >{{ .Title }}  h1 >                       |
|      16           |                   header >                                                                |
|      17           |                 {{.Content}}                                                              |
|      18           |                  < br  />                                                                 |
|      19           |                                                                                           |
|      20           |                  < div >                                                                  |
|      21           |                     {{with .NextInSection}}                                               |
|      22           |                      < a  href = "{{.Permalink}}" >前一页  a >                            |
|      23           |                     {{end}}                                                               |
|      24           |                     {{with NextInSection}}                                                |
|      25           |                      < a  href = "{{.Permalink}}" >后一页  a >                            |
|      26           |                     {{end}}                                                               |
|      27           |                   div >                                                                   |
|      28           |               article >                                                                   |
|      29           |           div >                                                                           |
|      30           |       body >                                                                              |
|      31           |                                                                                           |
|      32           |       html >                                                                              |
| #+END_EXAMPLE     | #+END_EXAMPLE                                                                             |

* 自定义hugo主题--网站首页 - Hugo 中文帮助文档
  首页也属于列表页, 只是他是一个特殊的列表页. 如果没有给首页添加模板, 首页使用
  内容页的模板.

** 首页模板的位置
/themes/study-theme/layouts/index.html 首页模板使用单独的模板, 模板的名字也是固
定的 index.html. 也可以给首页添加一个markdown文件, 位置在content根目录下,
/content/_index.md. 这个不是必须的.

** 在首页中展示各章节的文章列表
 首页是整个网站的一个索引, 我们一般会在首页中展示各个板块的文章列表, 在本DEMO中
 我们添加了两个板块, 也就是/content目录中的news 和 post这两个章节目录, 现在我们
 把这两个章节的内容添加到首页中.

| 网站首页                                              |
 |                                                       |
 | 新闻列表                                              |
 | {{ range where .Site.RegularPages "Section" "news" }} |
 | {{.Title}}                                            |
 | {{ end }}                                             |
 |                                                       |
 | 博文列表                                              |
 | {{ range where .Site.RegularPages "Section" "post" }} |
 | {{.Title}}                                            |
 | {{ end }}                                             |

 这里主要用到两点

 - =.Site.RegularPages= 表示网站下面的所有节点内容, 具体到本例, 就是news和post目录下的所有文章
 - =where= 是一个函数, 用来查询集合中符合条件的项目.

 where 的语法: =where COLLECTION KEY [OPERATOR] MATCH=

 =where .Site.RegularPages "Section" "news"= 的含义就是, 查找出section属性的值为news的项目
 
* [[https://hugo.aiaide.com/post/%E8%87%AA%E5%AE%9A%E4%B9%89hugo%E4%B8%BB%E9%A2%98-%E5%AF%BC%E8%88%AA%E8%8F%9C%E5%8D%95/][自定义hugo主题--导航菜单 - Hugo 中文帮助文档]] :website:
*** 设置导航菜单的位置

 在根目录下的 config.toml 文件中配置导航菜单, config 文件支持三种文件格式: toml,
 yaml, json, 可以使用自己熟悉的格式. 使用对应的格式需要修改对应的扩展名. 不推荐
 使用 JSON 格式, 因为 json 不支持注释, 在配置文件中添加注释是非常有必要的.

 通过.Site.Menus 变量获取到设置的菜单信息, 下面以 toml 格式为例展示导航菜单的使用.

*** 添加主导航菜单和页脚导航菜单
 | # 主导航菜单      |
 | name = "首页"     |
 | url = "/"         |
 | weight = "1"      |
 | [[ menu . main ]]     |
 | name = "博文"     |
 | url = "/post"     |
 | weight = "2"      |
 | [[ menu . main ]]     |
 | name = "新闻"     |
 | url = "/news"     |
 | weight = "3"      |
 | [[ menu . main ]]     |
 | name = "关于"     |
 | url = "/about"    |
 | weight = "4"      |
 |                   |
 | # 页脚导航菜单    |
 | [[ menu . foot ]]     |
 | name = "网站首页" |
 | url = "/"         |
 | weight = "4"      |
 | [[ menu . foot ]]     |
 | name = "博文集合" |
 | url = "/post"     |
 | weight = "3"      |
 | [[ menu . foot ]]     |
 | name = "新闻列表" |
 | url = "/news"     |
 | weight = "2"      |
 | [[ menu . foot ]]     |
 | name = "关于我们" |
 | url = "/about"    |
 | weight = "1"      |
 | #+END_EXAMPLE     |

 获取菜单的代码如下”

 | #+BEGIN_EXAMPLE   | #+BEGIN_EXAMPLE                                            |
 |        1          |       < h2 >主导航菜单  h2 >                               |
 |       2           |      < ul >                                                |
 |       3           |       {{ range .Site.Menus.main }}                         |
 |       4           |        < li >< a  href = "{{.URL}}" >{{.Name}}  a > li >   |
 |       5           |       {{ end }}                                            |
 |       6           |       ul >                                                 |
 |       7           |                                                            |
 |       8           |      < h2 >页脚导航菜单  h2 >                              |
 |       9           |      < ul >                                                |
 |      10           |       {{ range .Site.Menus.foot }}                         |
 |      11           |        < li >< a  href = "{{.URL}}" >{{.Name}}  a > li >   |
 |      12           |       {{ end }}                                            |
 |      13           |       ul >                                                 |
 | #+END_EXAMPLE     | #+END_EXAMPLE                                              |

 =.Site.Menus=后面接的是在 config.toml 中定义的表名

*** 定义多级菜单


 | #+BEGIN_EXAMPLE   | #+BEGIN_EXAMPLE           |
 |        1          |       [[ menu . main ]]   |
 |       2           |      name = "首页"        |
 |       3           |      url = "/"            |
 |       4           |      weight = "1"         |
 |       5           |      [[ menu . main ]]    |
 |       6           |      name = "博文"        |
 |       7           |      url = "/post"        |
 |       8           |      weight = "2"         |
 |       9           |      [[ menu . main ]]    |
 |      10           |      name = "新闻"        |
 |      11           |      url = "/news"        |
 |      12           |      weight = "3"         |
 |      13           |      [[ menu . main ]]    |
 |      14           |      name = "关于"        |
 |      15           |      url = "/about"       |
 |      16           |      weight = "4"         |
 |      17           |      [[ menu . main ]]    |
 |      18           |      name = "子菜单"      |
 |      19           |      weight = "5"         |
 |      20           |      [[ menu . main ]]    |
 |      21           |      parent = "子菜单"    |
 |      22           |      name = "子菜单1"     |
 |      23           |      weight = "2"         |
 |      24           |      [[ menu . main ]]    |
 |      25           |      parent = "子菜单"    |
 |      26           |      name = "子菜单2"     |
 |      27           |      weight = "1"         |
 | #+END_EXAMPLE     | #+END_EXAMPLE             |

 获取菜单的代码如下:

 | #+BEGIN_EXAMPLE   | #+BEGIN_EXAMPLE                                            |
 |        1          |       < h2 >主导航菜单  h2 >                               |
 |       2           |                                                            |
 |       3           |      < ul >                                                |
 |       4           |       {{ range .Site.Menus.main }}                         |
 |       5           |       {{if .HasChildren}}                                  |
 |       6           |        < li >{{.Name}}  li >                               |
 |       7           |        < ul >                                              |
 |       8           |         {{ range .Children }}                              |
 |       9           |          < li >                                            |
 |      10           |            < a  href = "{{ .URL }}" >{{ .Name }}  a >      |
 |      11           |           li >                                             |
 |      12           |         {{ end }}                                          |
 |      13           |         ul >                                               |
 |      14           |       {{ else }}                                           |
 |      15           |        < li >< a  href = "{{.URL}}" >{{.Name}}  a > li >   |
 |      16           |       {{end}} {{ end }}                                    |
 |      17           |       ul >                                                 |
 | #+END_EXAMPLE     | #+END_EXAMPLE                                              |

 子菜单项比普通的菜单项多了一个属性 =parent=, 用于设置父菜单的ID, 这里用的是Name的值, 如果name的值不重复, 一旦重复就会产生意想不到的效果. 正确的做法是使用Identifier的值.

*** 导航菜单常用的属性


 - =.Name=: 菜单想的名称, 如果Name的值重复了, 要想使其生效, 需要为其设置Identifier属性
 - =.Identifier=: 菜单想的唯一标识, 值不能重复.
 - =.Weight=: 用于设置菜单项的排序, 值越小排名越靠前.
 - =.Parent=: 设置父菜单的ID.
 - =.URL=: 设置菜单项直向的URL地址.

*** 当行菜单常用的方法


 - =.HasChildren=: 判断是否包含子菜单. 如果有子菜单则返回true

